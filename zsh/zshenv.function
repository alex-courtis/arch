# non-interactive shell invoked functions go here

# don't evaluate git ps1
# basic zsh =~ regex
# e.g. export NO_GIT_PS1="${HOME}/src/cmocka|${HOME}/src/linux|${HOME}/src/yaml-cpp"
if [ -f "${HOME}/.nogitps1" ]; then
	. "${HOME}/.nogitps1"
fi

# terminal title; avoid when possible as this is expensive, especially when starting a shell just for it
function printtermtitle() {

	# don't include __git_ps1 in the print lest it be prompt substituted
	print -Pn "%~"

	# obey ~/.nogitps1
	if [[ -n "${NO_GIT_PS1}" && "${PWD}" =~ "${NO_GIT_PS1}" ]]; then
		return
	fi

	# lazy load __git_ps1
	if ! type __git_ps1 > /dev/null 2>&1; then
		if [ "${UNAME}" = "Darwin" ]; then
			git_ps1_script="/opt/homebrew/etc/bash_completion.d/git-prompt.sh"
		else
			if [ -f "/usr/share/git/completion/git-prompt.sh" ]; then
				git_ps1_script="/usr/share/git/completion/git-prompt.sh"
			elif [ -f "/usr/lib/git-core/git-sh-prompt" ]; then
				git_ps1_script="/usr/lib/git-core/git-sh-prompt"
			fi
		fi
		if [ -f "${git_ps1_script}" ]; then
			GIT_PS1_SHOWDIRTYSTATE="true"
			GIT_PS1_SHOWSTASHSTATE="true"
			GIT_PS1_SHOWUPSTREAM="auto"
			. ${git_ps1_script}
		else
			function __git_ps1() { : }
		fi
		unset git_ps1_script
	fi

	__git_ps1
}

# print git ps1, current branch, upstream URL
function gs() {
	local git_ps1=$(__git_ps1 2>/dev/null)
	[ -n "${git_ps1}" ] && print "${git_ps1}"

	local branch_local=$(git rev-parse --abbrev-ref HEAD 2>/dev/null)
	[ -n "${branch_local}" ] && print "\n${branch_local}"

	local branch_remote=$(git rev-parse --abbrev-ref --symbolic-full-name @{upstream} 2>/dev/null)
	if [ -n "${branch_remote}" ]; then
		print "${branch_remote}"
		local url=$(git remote get-url ${branch_remote/\/*/})
		if [ -n "${url}" ]; then
			print "\n${url}\n${${(S)url/*:/}/\/*/}"
		fi
	fi
}

# set branch upstream to $1
function gu {
	if [ ${#} -ne 1 ]; then
		echo "Usage: gu <name>" >&2
		return 1
	fi
	branch_local=$(git rev-parse --abbrev-ref HEAD)
	git branch --set-upstream-to="${1}/${branch_local}" "${branch_local}"
}

function boot {
	if [ ${#} -ne 1 ]; then
		echo "Usage: boot <desc>" >&2
		return 1
	fi

	BOOT_NUM=$(efibootmgr \
		| grep -Ei "^Boot[[:xdigit:]]*\* *${1}" \
		| head -n 1 \
		| sed -E 's/^Boot([[:xdigit:]]*)\*.*$/\1/g' \
	)

	if [ -n "${BOOT_NUM}" ]; then
		sudo efibootmgr -n "${BOOT_NUM}"
		sudo systemctl reboot
	else
		efibootmgr
		printf "\nno %s\n" "${1}"
	fi
}
