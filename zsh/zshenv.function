# non-interactive shell invoked functions go here

# try to load a __git_ps1 otherwise create an empty function
for s in \
	"/opt/homebrew/etc/bash_completion.d/git-prompt.sh" \
	"/usr/share/git/completion/git-prompt.sh" \
	"/usr/lib/git-core/git-sh-prompt" \
	;
do
	[ -f "${s}" ] && . "${s}" && break
done
if ! type __git_ps1 > /dev/null 2>&1; then
	function __git_ps1() { : }
fi

export GIT_PS1_SHOWDIRTYSTATE="true"
export GIT_PS1_SHOWSTASHSTATE="true"
export GIT_PS1_SHOWUPSTREAM="auto"
if [ "${UNAME}" != "Darwin" ]; then
	export GIT_PS1_SHOWUNTRACKEDFILES="true"
fi

# terminal title; avoid when possible as this is expensive, especially when starting a shell just for it
function printtermtitle() {
	# don't include __git_ps1 in the print lest it be prompt substituted
	print -Pn "${PROMPT_CONTEXT+${PROMPT_CONTEXT} }%~"

	__git_ps1
}

# print git ps1, current branch, upstream URL
function gs() {
	local git_ps1=$(GIT_PS1_SHOWDIRTYSTATE="true" __git_ps1 2>/dev/null)
	[ -n "${git_ps1}" ] && print "${git_ps1}"

	local branch_local=$(git rev-parse --abbrev-ref HEAD 2>/dev/null)
	[ -n "${branch_local}" ] && print "\n${branch_local}"

	local branch_remote=$(git rev-parse --abbrev-ref --symbolic-full-name @{upstream} 2>/dev/null)
	if [ -n "${branch_remote}" ]; then
		print "${branch_remote}"
		local url=$(git remote get-url ${branch_remote/\/*/})
		if [ -n "${url}" ]; then
			print "\n${url}\n${${(S)url/*:/}/\/*/}"
		fi
	fi
}

# set branch upstream to $1
function gu {
	if [ ${#} -ne 1 ]; then
		echo "Usage: gu <name>" >&2
		return 1
	fi
	branch_local=$(git rev-parse --abbrev-ref HEAD)
	git branch --set-upstream-to="${1}/${branch_local}" "${branch_local}"
}

function prn_archive() {
	if [ ${#} -lt 1 ]; then
		echo "Usage: ${0} FILE_PATH.." >&2
		return 1
	fi

	local dest="/lord/prn/archive"
	chmod -v 755 "${dest}"

	for f in ${*}; do
		echo "${f}"
		chmod -v 444 "${f}"
		mv -v "${f}" "${dest}"
	done

	chmod -v 555 "${dest}"
}

function boot {
	if [ ${#} -ne 1 ]; then
		echo "Usage: boot <desc>" >&2
		return 1
	fi

	BOOT_NUM=$(efibootmgr \
		| grep -Ei "^Boot[[:xdigit:]]*\*.*${1}" \
		| head -n 1 \
		| sed -E 's/^Boot([[:xdigit:]]*)\*.*$/\1/g' \
	)

	if [ -n "${BOOT_NUM}" ]; then
		sudo efibootmgr -n "${BOOT_NUM}"
		sudo systemctl reboot
	else
		efibootmgr
		printf "\nno %s\n" "${1}"
	fi
}
