#!/bin/bash

case "${1}" in
	"")
		;;
	*)
		printf "usage: %s\n" "${0}"
		printf "  git fetch --prune\n"
		printf "  git remote -v update --prune\n"
		printf "  gone branches will prompt:\n"
		printf "    git branch -D <branch>\n"
		printf "  branches with no remote will prompt:\n"
		printf "    git branch -D <branch>\n"
		exit 1
		;;
esac


printf "==== fetching and pruning ====\n\n"

(set -x; git fetch --prune) ; printf "\n"

(set -x; git remote -v update --prune) ; printf "\n"


printf "==== deleting gone ====\n\n"

(set -x; git --no-pager branch -vv | grep --color -E "gone|$") ; printf "\n"

GONE="$(git --no-pager branch -vv | grep gone | sed -E 's#^..([^ ]*) .*$#\1#g')"
for b in ${GONE}; do

	printf "%s\n\n" "${b}"
	(set -x; git show "${b}" --oneline --no-patch)
	printf "\n"

	IFS= read -r -p "git branch -D ${b} ? " yn
	if [ "${yn}" = "y" ]; then
		(set -x; git branch -D "${b}")
	fi
	printf "\n"
done


printf "==== deleting no remote ====\n\n"

(set -x; git --no-pager branch -r) ; printf "\n"

(set -x; git --no-pager branch --list --format="%(refname:lstrip=2)") ; printf "\n"

BRANCHES="$(git --no-pager branch --list --format="%(refname:lstrip=2)")"
for b in ${BRANCHES}; do
	if ! git --no-pager branch --remote --format="%(refname:lstrip=3)" | grep -E "^${b}$" > /dev/null; then

		if git worktree list | grep -E "\[${b}\]$" > /dev/null; then
			printf "skipping worktree %s\n\n" "${b}"
			continue
		fi

		printf "%s\n\n" "${b}"
		(set -x; git show "${b}" --oneline --no-patch) ; printf "\n"

		IFS= read -r -p "git branch -D ${b} ? " yn
		if [ "${yn}" = "y" ]; then
			(set -x; git branch -D "${b}")
		fi

		printf "\n"
	fi
done
